3티어란? 

3 Tier-architecture
--> 한개의 애플리케이션 서버(플랫폼)을 3개의 계층으로 분리시킨 구조

<<<<<<<<<프리젠테이션 계층>>>>>>>>>>

일반 사용자가 애플리케이션과 상호작용하는 애플리케이션의 사용자 인터페이스 및 커뮤니케이션 계층
주요 목적은 정보를 표시하고 사용자로부터 정보를 수집하는 것 
웹 브라우저, 데스크탑 애플리케이션 또는 그래픽 사용자 인터페이스(GUI)에서 실행됨.

웹 프리젠테이션 계층은 일반적으로 HTML, CSS 및 JavaScript를 사용하여 개발된다. 

데스크탑 애플리케이션은 플랫폼에 따라 다양한 언어로 작성될 수 있다.


<<<<<<<<<애플리케이션 계층>>>>>>>>>>

논리 계층 또는 중간 계층이라고도 하는 애플리케이션 계층은 애플리케이션의 핵심
이 계층에서는 특정 비즈니스 규칙 세트인 비즈니스 논리를 사용하여 프레젠테이션 계층에서 수집된 정보가 처리된다
(경우에 따라 데이터 계층의 다른 정보와 관련하여 처리됨). 

또한 애플리케이션 계층은 데이터 계층의 데이터를 추가, 삭제 또는 수정할 수도 있다. 

애플리케이션 계층은 일반적으로 Python, Java, Perl, PHP 또는 Ruby를 사용하여 개발되며,  API 호출을 사용하여 데이터 계층과 통신한다.


<<<<<<<<<데이터 계층>>>>>>>>>>

종종 데이터베이스 계층, 데이터 액세스 계층 또는 백엔드라고도 불리는 데이터 계층은 애플리케이션이 처리하는 정보가 저장 및 관리되는 곳
이는 관계형 데이터베이스 관리 시스템 (예:  PostgreSQL, MySQL, MariaDB, Oracle, DB2, Informix 또는 Microsoft SQL Server) 또는  
NoSQL 데이터베이스 서버(예: Cassandra,  CouchDB 또는  MongoDB)일 수 있다. 

3계층 애플리케이션에서는 모든 통신이 애플리케이션 계층을 통과하고. 프레젠테이션 계층과 데이터 계층은 서로 간에 직접 통신할 수 없다.



한 서버에 몰아놓고 개발을 할 수 있는데도 왜 3 티어가 클라이언트-서버 애플리케이션에서 표준화가 됐을까?

why 3 Tier?

서버의 부하를 줄여주기 때문이다. 또한, 각 계층이 자체 인프라에서 실행되기 때문에

각 계층이 별도의 개발 팀에 의해 동시에 개발될 수 있고,

다른 계층에 영향을 주지 않고 필요에 따라 업데이트되거나 확장될 수 있기때문.

프레젠테이션 계층과 데이터 계층은 서로 간에 직접 통신할 수 없기때문에, SQL 인젝션과 같은 해킹방어에 유리하다.
----------------------------------------------------------------------------------------------------------

이 3계층 구조의 온프레미스 서버가 점점 클라우드로 마이그레이션되가는 추세다.

3계층구조가 가용성을 늘려줬다고 하지만, 3계층 서버의 가용성을 늘리기위해선 각각의 로드밸런서가 필요하다고 판단된다. 따라서 

각 계층별 서버를 한개로 두지 않고 여러개를 두면 백업과 업데이트를 더 효과적으로 할 수 있을 것 같다.









